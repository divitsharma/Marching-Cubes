// Each #kernel tells which function to compile; you can have many kernels (functions)
#pragma kernel CSMain
#pragma kernel Multiply
#pragma kernel MarchCubes

#include "tables.compute"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// unity outputs a texture by default
// RW means shader will read and write to
RWTexture2D<float4> Result;

// Custom input stream
struct VecMatPair
{
	float3 pos;
	float3 otherpos;
};

RWStructuredBuffer<VecMatPair> dataBuffer;

// dimensions of thread groups spawned (each group has 64 threads)
// each gpu processor runs 1 thread group at a time
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) // id is xy of the pixel being worked on
{
    // TODO: insert actual code here!

	Result[id.xy] = float4(id.x & id.y, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 0.0);
	//Result[id.xy] = float4(1, 0, 0, 1);
}

[numthreads(16, 1, 1)]
void Multiply(uint3 id : SV_DispatchThreadID)
{
	dataBuffer[id.x].pos = dataBuffer[id.x].pos + dataBuffer[id.x].otherpos;
}


struct Triangle
{
	float3 a;
	float3 b;
	float3 c;
};
AppendStructuredBuffer<Triangle> triangles;
// how many triangles/vertices will there be? how to index in this array to fill it?
// every cube can have max 5 triangles, but most cubes will have no triangles, and how to index those 5?
// just use triangle array to be more efficient?
//RWStructuredBuffer<float3> vertices;
// This may be too big to efficiently pass to GPU.
StructuredBuffer<float> scalarField;

// Run a thread for every cube in the current chunk. Each thread group given 64 threads.
// id.xyz represents absolute bottom left position of a cube.
[numthreads(4, 4, 4)]
void MarchCubes(uint3 id: SV_DispatchThreadID)
{
	Triangle t;
	t.a = id.x + 0.5;
	t.b = id.y + 0.5;
	t.c = id.z + 0.5;
	triangles.Append(t);
}
