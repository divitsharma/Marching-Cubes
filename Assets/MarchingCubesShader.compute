// Each #kernel tells which function to compile; you can have many kernels (functions)
//#pragma kernel CSMain
//#pragma kernel Multiply
#pragma kernel MarchCubes

#include "tables.compute"


struct Triangle
{
	float3 a;
	float3 b;
	float3 c;
};
// consume buffers can be used to read in a list instead of output a list
// using lists is a way of modifying the length of data gpu is working with (eg. spawn/kill things)
AppendStructuredBuffer<Triangle> triangles;
// This may be too big to efficiently pass to GPU.
StructuredBuffer<float> scalarField;
int fieldLength;
int fieldHeight;
int fieldWidth;

float surfaceLevel;
float gridScale;


int ToArrayIndex(float3 pos)
{
	return fieldHeight * fieldLength * pos.z + (fieldLength * pos.y + pos.x);
}

int getCubeIndex(float3 pos)
{
	int index = 0;
	for (int i = 0; i < 8; i++) {
		if (scalarField[ToArrayIndex(pos + vtxIndices[i])] > surfaceLevel) {
			index |= int(pow(2, i));
		}
	}
	return index;
}

float3 VertexInterpolate(float3 a, float3 b, float3 pos)
{
	a += pos;
	b += pos;
	return a + (surfaceLevel - scalarField[ToArrayIndex(a)]) * (b - a) / (scalarField[ToArrayIndex(b)] - scalarField[ToArrayIndex(a)]);
}

// Run a thread for every cube in the current chunk. Each thread group given 64 threads.
// id.xyz represents absolute bottom left position of a cube.
// how does each dimension affect performance?
[numthreads(4, 4, 4)]
void MarchCubes(uint3 id: SV_DispatchThreadID)
{
	int cubeIndex = getCubeIndex(id.xyz);

	int triIndices[] = triTable[cubeIndex];
	for (int i = 0; triIndices[i] != -1; i += 3) {
		int edge0 = triIndices[i]; // 0,11,2
		int edge1 = triIndices[i+1];
		int edge2 = triIndices[i+2];

		int a0 = CornerIndexFromEdgeA[edge0];
		int b0 = CornerIndexFromEdgeB[edge0];

		int a1 = CornerIndexFromEdgeA[edge1];
		int b1 = CornerIndexFromEdgeB[edge1];

		int a2 = CornerIndexFromEdgeA[edge2];
		int b2 = CornerIndexFromEdgeB[edge2];

		Triangle t;
		t.c = VertexInterpolate(vtxIndices[a0], vtxIndices[b0], id.xyz) * gridScale;
		t.b = VertexInterpolate(vtxIndices[a1], vtxIndices[b1], id.xyz) * gridScale;
		t.a = VertexInterpolate(vtxIndices[a2], vtxIndices[b2], id.xyz) * gridScale;
		triangles.Append(t);
	}
}
